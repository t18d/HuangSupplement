# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# Sample workflow for building and deploying a Jekyll site to GitHub Pages
name: Deploy Jekyll site to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ['main']
    paths:
      - '**.md'
      - '**.css'
      - '**.webp'
      - '**.woff2'
      - '*.xml'
      - '**.html'
      - .github/workflows/jekyll.yml
      - _config.yml

  workflow_run:
    workflows:
      - "Generate README.md"
      - "Generate obsolete.md"
      - "Generate orthography.md"
      - "Generate style.md"
    types: [completed]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build1:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # Do a sparse checkout on given patterns. Each pattern should be separated with
          # new lines.
          # Default: null
          sparse-checkout: |
            _includes/
            _layouts/
            docs/
            assets/css/
            assets/js/
            assets/webp/
            assets/font/
      - uses: dorny/paths-filter@v3
        id: filter
        with:
    # Enable listing of files matching each filter.
    # Paths to files will be available in `${FILTER_NAME}_files` output variable.
    # Paths will be escaped and space-delimited.
    # Output is usable as command-line argument list in Linux shell
          list-files: shell

    # In this example changed files will be checked by linter.
    # It doesn't make sense to lint deleted files.
    # Therefore we specify we are only interested in added or modified files.
          filters: |
            markdown:
              - added|modified: '**.md'
      - name: Lint Markdown
        if: ${{ steps.filter.outputs.markdown == 'true' }}
        run: |
          sed -i "0,/last_modified_at.*/s//last_modified_at: $(date -Iseconds)/" ${{ steps.filter.outputs.markdown_files }}
      - uses: stefanzweifel/git-auto-commit-action@v5
        with:
    # Optional. Commit message for the created commit.
    # Defaults to "Apply automatic changes"
          commit_message: Apply timestamp
          commit_user_name: git-auto-commit-action
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3' # Not needed with a `.ruby-version` or `.tool-versions`
          bundler-cache: true # runs 'bundle install' and caches installed gems automatically
          cache-version: 0 # Increment this number if you need to re-download cached gems
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5
      - name: Build with Jekyll
        # Outputs to the './_site' directory by default
        run: bundle exec jekyll build --baseurl "${{ steps.pages.outputs.base_path }}"
        env:
          JEKYLL_ENV: production
      - name: HTML/CSS/JS Minifier
        uses: docker://devatherock/minify-js:3.1.0
        with:
          directory: './_site'
          add_suffix: false
          exclusions: |-
            assets/js/
      - uses: actions/setup-node@v4
        with:
          cache: 'npm'
          cache-dependency-path: 'LICENSE'
      - uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip' # caching pip dependencies
      - run: pip install -r requirements.txt
      # Runs a set of commands using the runners shell
      - name: Run glyphhanger
        run: |
          sudo sysctl -w kernel.apparmor_restrict_unprivileged_userns=0
          npx glyphhanger ./_site/index.html --formats=woff2 --subset=assets/font/*.ttf
          fonttools merge assets/font/*subset*
          npx glyphhanger --subset=merged.ttf --formats=woff2
          cp merged-subset.woff2 _site/assets/FSung-su.woff2
          rm assets/font/*subset* merged*
          npx glyphhanger ./_site/obsolete/index.html --formats=woff2 --subset=assets/font/*.ttf
          fonttools merge assets/font/*subset*
          npx glyphhanger --subset=merged.ttf --formats=woff2
          cp merged-subset.woff2 _site/assets/FSung-ob.woff2
      - name: Upload artifact
        # Automatically uploads an artifact from the './_site' directory by default
        uses: actions/upload-pages-artifact@v3

  build2:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # Do a sparse checkout on given patterns. Each pattern should be separated with
          # new lines.
          # Default: null
          sparse-checkout: |
            _includes/
            _layouts/
            docs/
            assets/css/
            assets/js/
            assets/webp/
            assets/font/
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3' # Not needed with a `.ruby-version` or `.tool-versions`
          bundler-cache: true # runs 'bundle install' and caches installed gems automatically
          cache-version: 0 # Increment this number if you need to re-download cached gems
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5
      - name: Build with Jekyll
        # Outputs to the './_site' directory by default
        run: bundle exec jekyll build --baseurl "${{ steps.pages.outputs.base_path }}"
        env:
          JEKYLL_ENV: production
      - name: HTML/CSS/JS Minifier
        uses: docker://devatherock/minify-js:3.1.0
        with:
          directory: './_site'
          add_suffix: false
          exclusions: |-
            assets/js/
      - uses: actions/setup-node@v4
        with:
          cache: 'npm'
          cache-dependency-path: 'LICENSE'
      - uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip' # caching pip dependencies
      - run: pip install -r requirements.txt
      # Runs a set of commands using the runners shell
      - name: Run glyphhanger
        run: |
          sudo sysctl -w kernel.apparmor_restrict_unprivileged_userns=0
          npx glyphhanger ./_site/index.html --formats=woff2 --subset=assets/font/*.ttf
          fonttools merge assets/font/*subset*
          npx glyphhanger --subset=merged.ttf --formats=woff2
          cp merged-subset.woff2 _site/assets/FSung-su.woff2
          rm assets/font/*subset* merged*
          npx glyphhanger ./_site/obsolete/index.html --formats=woff2 --subset=assets/font/*.ttf
          fonttools merge assets/font/*subset*
          npx glyphhanger --subset=merged.ttf --formats=woff2
          cp merged-subset.woff2 _site/assets/FSung-ob.woff2
      - name: Upload artifact
        # Automatically uploads an artifact from the './_site' directory by default
        uses: actions/upload-pages-artifact@v3
  
  # Deployment job
  deploy1:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build1
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
  
  deploy2:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build2
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
